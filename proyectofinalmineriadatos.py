# -*- coding: utf-8 -*-
"""ProyectoFinalMineriaDatos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9ZtM3lAx8TuEWEmPsaHGNqB17NEpcnG

# Algoritmo de clasificación para predecir diabetes.
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

datos = pd.read_csv('diabetes.csv')
datos.head()

"""### Limpieza de datos

como el numero de embarazos que ha tenido y el grosor de la piel no son factores que afecten mucho en la deteccion de la diabetes podemos quitar estas columnas
"""

datos = datos.drop(columns=['Pregnancies', 'SkinThickness'])
datos

"""todos los valores que estan en 0 los cambiamos por la media sobre los valores que si tienen un valor mayor que 0, esto lo hacemos para todas las columnas menos para la columna DiabetesPedigreeFunction y Age"""

mediaGlucose = datos[datos['Glucose'] != 0]['Glucose'].mean()
integerMediaGlucose = int(mediaGlucose)
datos.loc[(datos['Glucose'] == 0), 'Glucose'] = integerMediaGlucose

mediaBloodPressure = datos[datos['BloodPressure'] != 0]['BloodPressure'].mean()
integerBloodPressure = int(mediaBloodPressure)
datos.loc[(datos['BloodPressure'] == 0), 'BloodPressure'] = integerBloodPressure

mediaInsulin = datos[datos['Insulin'] != 0]['Insulin'].mean()
integerInsulin = int(mediaInsulin)
datos.loc[(datos['Insulin'] == 0), 'Insulin'] = integerInsulin

mediaBMI = datos[datos['BMI'] != 0]['BMI'].mean()
mediaBMI = round(mediaBMI, 1)
datos.loc[(datos['BMI'] == 0), 'BMI'] = mediaBMI

"""verificamos si existen valores atipicos (outliers).
con la calculadora para outliers (https://www.graphpad.com/quickcalcs/Grubbs1.cfm)

se puede ver que en la columna BloodPressure existen los sigueintes datos atipicos: 122, 24
"""

datos = datos[datos['BloodPressure'] != 122]
datos = datos[datos['BloodPressure'] != 24]
datos.shape[0]

"""en la columna Insulin existe los sigientes datos atipicos con valor de 846, 744, 680, 600, 579, 545, 543, 540, 510, 495, 495, 485, 480, 480, 478, 474, 465, 440, 415, 402, 392, 387, 375, 370, 360 eliminamos estos datos."""

datos = datos[datos['Insulin'] < 360]
datos.shape[0]

"""para el indice de masa corporal BMI existen los siguientes datos atipicos: 67.1, 59.4"""

datos = datos[datos['BMI'] < 59.4]
datos.shape[0]

"""para nuestra columna de DiabetesPedigreeFunction existen los siguientes datos atipicos: 2.420, 2.329, 2.288, 2.137, 1.893, 1.781, 1.731, 1.699, 1.698, 1.600. Eliminamos estos datos de nuestro dataset"""

datos = datos[datos['DiabetesPedigreeFunction'] < 1.6]
datos.shape[0]

"""Para nuestra columna de edad (Age) tenemos los siguientes datos atipicos: 81"""

datos = datos[datos['Age'] != 81]
datos.shape[0]

"""### Atributos y variable de clasificacion"""

X = np.array(datos.drop(["Outcome"], axis=1))
y = np.array(datos["Outcome"])

"""### Datos de entrenamiento y de prueba"""

X_entrenamiento, X_prueba, y_entrenamiento, y_prueba = train_test_split(X, y, random_state=0, test_size=0.20)

"""## Creando el modelo"""

tree = DecisionTreeClassifier(criterion='entropy', min_samples_leaf=12, max_depth=15, min_samples_split=20)

tree.fit(X_entrenamiento, y_entrenamiento)

tree.tree_.max_depth

predicciones_prueba = tree.predict(X_prueba)
predicciones_entrenamiento = tree.predict(X_entrenamiento)

"""### Mostrando el arbol de forma visual"""

# Se require instalar la libreria grpahviz
# si esta utilizando colab use la siguiente instrucción
!apt-get install graphviz

# si esta utilizando colab use la siguiente instrucción
!pip install graphviz

import graphviz 
from sklearn.tree import export_graphviz

feature_names = datos.drop(["Outcome"], axis=1).columns

dot_data = export_graphviz(tree, out_file=None, 
                         feature_names=feature_names,  
                         class_names=True,  
                         filled=True, rounded=True,  
                         special_characters=True)  
graph = graphviz.Source(dot_data)

graph

"""## Métricas"""

# importar librerias para métricas
from sklearn.metrics import accuracy_score

"""### Exactitud"""

print("Exactitud (conjunto de entrenamiento): ", accuracy_score(y_entrenamiento, predicciones_entrenamiento))
print("Exactitud (conjunto de prueba): ", accuracy_score(y_prueba, predicciones_prueba))

"""### Creando un nuevo paciente

vemos que este modelo no está sobre ajustado (el sobre ajuste es que las metricas de entrenamiento sean muy buenas o altas y que las metricas para los datos de prueba salgan bajas o malas), por lo que nos sirve para hacer nuevas predicciones
"""

nuevoPaciente = np.array([196, 76, 280, 37, 0.605, 57]).reshape(1, -1)
prediccionNuevoPaciente = tree.predict(nuevoPaciente)
prediccionNuevoPaciente